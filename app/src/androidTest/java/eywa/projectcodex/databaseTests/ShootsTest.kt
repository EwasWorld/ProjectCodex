package eywa.projectcodex.databaseTests

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import eywa.projectcodex.common.TestUtils
import eywa.projectcodex.common.TestUtils.parseDate
import eywa.projectcodex.common.sharedUi.previewHelpers.ShootPreviewHelperDsl
import eywa.projectcodex.components.shootDetails.headToHeadEnd.HeadToHeadResult
import eywa.projectcodex.database.Filters
import eywa.projectcodex.database.ScoresRoomDatabaseImpl
import eywa.projectcodex.database.shootData.DatabaseArrowCountCalendarData
import eywa.projectcodex.database.shootData.DatabaseShoot
import eywa.projectcodex.database.shootData.DatabaseShootRound
import eywa.projectcodex.database.shootData.ShootDao
import eywa.projectcodex.database.shootData.ShootFilter
import eywa.projectcodex.database.shootData.ShootsRepo
import eywa.projectcodex.hiltModules.LocalDatabaseModule.Companion.add
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import java.util.Calendar

@RunWith(AndroidJUnit4::class)
class ShootsTest {
    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    private lateinit var db: ScoresRoomDatabaseImpl
    private lateinit var shootsRepo: ShootsRepo

    @Before
    fun createDb() {
        db = DatabaseTestUtils.createDatabase()
        shootsRepo = db.shootsRepo()
    }

    @After
    fun closeDb() {
        db.close()
    }

    /**
     * Check the correct round info is retrieved for the given archer round.
     * Checks both the compiled query (given in [ShootDao]) and the raw query generated by [ShootsRepo]
     */
    @Test
    fun testGetFullShootInfo_RoundInfo() = runTest {
        /*
         * Create data and populate tables
         */
        val rounds = TestUtils.ROUNDS
        val shoots = listOf(
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(1, TestUtils.generateDate())
                    round = rounds[0]
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(2, TestUtils.generateDate())
                    round = rounds[1]
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(3, TestUtils.generateDate())
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(4, TestUtils.generateDate())
                    round = rounds[0]
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(5, TestUtils.generateDate())
                    round = rounds[1]
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(6, TestUtils.generateDate())
                },
        )

        rounds.forEach { db.add(it) }
        shoots.forEach { db.add(it) }

        /*
         * Check the correct round info is retrieved
         */
        val rawQueryActuals = shootsRepo.getFullShootInfo(Filters()).first()
        for (shoot in shoots) {
            val expectedShootRound = shoot.shootRound
            val daoCompiledActual = shootsRepo.getFullShootInfo(shoot.id).first()!!
            val rawQueryActual = rawQueryActuals.find { it.shoot.shootId == shoot.id }!!

            assertEquals(expectedShootRound?.roundId, daoCompiledActual.round?.roundId)
            assertEquals(expectedShootRound?.roundId, rawQueryActual.round?.roundId)
            if (expectedShootRound?.roundId != null) {
                assertEquals(rounds[expectedShootRound.roundId - 1].round, daoCompiledActual.round)
                assertEquals(rounds[expectedShootRound.roundId - 1].round, rawQueryActual.round)
            }
        }
    }

    /**
     * Check that:
     * - [DatabaseShootRound.roundSubTypeId]s of 1 and null are treated the same
     * - If a PB has been matched, all are returned
     * - Incomplete rounds are ignored
     * - Tied PBs are marked correctly
     * Checks both the compiled query (given in [ShootDao]) and the raw query generated by [ShootsRepo]
     */
    @Test
    fun testGetFullShootInfo_PersonalBests() = runTest {
        val rounds = TestUtils.ROUNDS
        val shoots = listOf(
                // Incomplete round (max score)
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(1, TestUtils.generateDate())
                    round = rounds[0]
                    roundSubTypeId = 1
                    completeRound(10, true)
                    arrows = arrows!!.dropLast(3)
                },
                // Different round type (max score)
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(2, TestUtils.generateDate())
                    round = rounds[1]
                    completeRound(10, true)
                },
                // Actual PB
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(3, TestUtils.generateDate())
                    round = rounds[0]
                    completeRound(5, false)
                },
                // Duplicate PB
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(4, TestUtils.generateDate())
                    round = rounds[0]
                    roundSubTypeId = 1
                    completeRound(5, false)
                },
                // Different round type (non-max score)
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(5, TestUtils.generateDate())
                    round = rounds[1]
                    completeRound(5, false)
                },
                // No round
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(6, TestUtils.generateDate())
                    addIdenticalArrows(36, 10, true)
                },
                // Lower than PB
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(7, TestUtils.generateDate())
                    round = rounds[0]
                    completeRound(1, false)
                },
                // Different sub type
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(8, TestUtils.generateDate())
                    round = rounds[0]
                    roundSubTypeId = 2
                    completeRound(10, true)
                },
        )

        rounds.forEach { db.add(it) }
        shoots.forEach { db.add(it) }

        // Compiled query
        assertEquals(
                setOf(2 to false, 3 to true, 4 to true, 8 to false),
                shootsRepo
                        .getFullShootInfo((1..8).toList())
                        .first()
                        .filter { it.isPersonalBest ?: false }
                        .map { it.shoot.shootId to it.isTiedPersonalBest }
                        .toSet()
        )
        // Raw query
        assertEquals(
                setOf(2 to false, 3 to true, 4 to true, 8 to false),
                shootsRepo
                        .getFullShootInfo()
                        .first()
                        .filter { it.isPersonalBest ?: false }
                        .map { it.shoot.shootId to it.isTiedPersonalBest }
                        .toSet()
        )
    }

    @Test
    fun testFilters() = runTest {
        val rounds = TestUtils.ROUNDS

        val shoots = listOf(
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(1, TestUtils.generateDate(2011, 3))
                    round = rounds[0]
                    roundSubTypeId = 1
                    completeRound(10, true)
                    arrows = arrows!!.dropLast(3)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(2, TestUtils.generateDate(2012, 3))
                    round = rounds[1]
                    completeRound(10, true)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(3, TestUtils.generateDate(2013, 3))
                    round = rounds[0]
                    completeRound(5, false)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(4, TestUtils.generateDate(2014, 3))
                    round = rounds[0]
                    roundSubTypeId = 1
                    completeRound(5, false)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(5, TestUtils.generateDate(2015, 3))
                    round = rounds[1]
                    completeRound(5, false)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(6, TestUtils.generateDate(2016, 3))
                    addIdenticalArrows(36, 10, true)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(7, "05/03/17 10:00".parseDate())
                    round = rounds[0]
                    roundSubTypeId = 2
                    completeRound(1, false)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(8, "05/03/17 11:00".parseDate())
                    round = rounds[0]
                    completeRound(1, false)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(9, "07/03/17 10:00".parseDate())
                    round = rounds[3]
                    completeRoundWithCounter()
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(10, "07/03/17 11:00".parseDate())
                    addArrowCounter(72)
                },
        )

        rounds.forEach { db.add(it) }
        shoots.forEach { db.add(it) }
        db.insertDefaults()

        suspend fun check(expectedIds: Set<Int>, filters: List<ShootFilter>) {
            assertEquals(
                    expectedIds,
                    shootsRepo
                            .getFullShootInfo(Filters(filters))
                            .first()
                            .map { it.shoot.shootId }
                            .toSet()
            )
        }

        // PBs
        check(setOf(2, 3, 4, 7), listOf(ShootFilter.PersonalBests))

        // Round
        check(setOf(1, 3, 4, 7, 8), listOf(ShootFilter.Round(1, null)))
        check(setOf(1, 3, 4, 8), listOf(ShootFilter.Round(1, 1)))
        check(setOf(7), listOf(ShootFilter.Round(1, 2)))
        check(setOf(2, 5), listOf(ShootFilter.Round(2, null)))
        check(setOf(6, 10), listOf(ShootFilter.Round(null, null)))

        // Date
        fun getDate(year: Int) = Calendar.getInstance().apply { set(year, 1, 1) }
        check((5..10).toSet(), listOf(ShootFilter.DateRange(from = getDate(2015))))
        check((1..4).toSet(), listOf(ShootFilter.DateRange(to = getDate(2015))))
        check((2..4).toSet(), listOf(ShootFilter.DateRange(from = getDate(2012), to = getDate(2015))))

        // All three
        check(
                setOf(4),
                listOf(
                        ShootFilter.DateRange(from = getDate(2014)),
                        ShootFilter.Round(1, 1),
                        ShootFilter.PersonalBests
                ),
        )

        // Arrow Counts
        check(setOf(9, 10), listOf(ShootFilter.ArrowCounts(true)))
        check((1..8).toSet(), listOf(ShootFilter.ArrowCounts(false)))

        // Score range
        check((1..6).toSet(), listOf(ShootFilter.ScoreRange(from = 200)))
        check((3..8).toSet(), listOf(ShootFilter.ScoreRange(to = 1000)))
        check((3..6).toSet(), listOf(ShootFilter.ScoreRange(from = 200, to = 1000)))

        // First of day
        check((1..9).toSet().minus(8), listOf(ShootFilter.FirstRoundOfDay))

        // Completed rounds
        check(setOf(2, 3, 4, 5, 7, 8, 9), listOf(ShootFilter.CompleteRounds))

        // All three
        check(
                setOf(3, 4, 5, 7),
                listOf(
                        ShootFilter.ScoreRange(to = 1000),
                        ShootFilter.FirstRoundOfDay,
                        ShootFilter.CompleteRounds
                ),
        )
    }

    @Test
    fun testGetJoinedShootIds() = runTest {
        val shoots = List(12) {
            DatabaseShoot(
                    shootId = 1 + it,
                    dateShot = TestUtils.generateDate(2020, 1 + it),
                    joinWithPrevious = (it + 1) in 3..5
            )
        }
        shoots.forEach { shootsRepo.insert(it) }

        shoots.forEach {
            assertEquals(
                    if (it.shootId in 2..5) (2..5).toList() else listOf(it.shootId),
                    shootsRepo
                            .getJoinedFullShoots(it.shootId)
                            .first()
                            .map { dbFar -> dbFar.shoot.shootId }
            )
        }
    }

    @Test
    fun testGetFullShootInfo_ArrowCounts() = runTest {
        val count = 12
        val shoot = ShootPreviewHelperDsl.create {
            shoot = DatabaseShoot(shootId = 1, dateShot = TestUtils.generateDate())
            addArrowCounter(count)
        }
        db.add(shoot)

        assertEquals(
                count,
                shootsRepo
                        .getFullShootInfo(1)
                        .first()!!
                        .arrowCounter!!
                        .shotCount
        )
    }

    @Test
    fun testGetCountsForCalendar_Dao() = runTest {
        db.add(TestUtils.ROUNDS[0])

        List(12) {
            ShootPreviewHelperDsl.create {
                shoot = shoot.copy(shootId = 1 + it, dateShot = "${5 + it}/3/20 10:00".parseDate())
                if (it < 6) {
                    addIdenticalArrows(3, 1)
                }
                else {
                    addArrowCounter(12)
                }
            }
        }.forEach { db.add(it) }

        listOf(
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 13, dateShot = "8/3/20 10:00".parseDate())
                    addArrowCounter(24)
                    addRound(TestUtils.ROUNDS[0], 6)
                },
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 14, dateShot = "9/3/20 10:00".parseDate())
                    addIdenticalArrows(24, 1)
                    addRound(TestUtils.ROUNDS[0], 6)
                },
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 15, dateShot = "8/3/20 10:00".parseDate())
                    addH2h {
                        addHeat {
                            addSet {
                                addRows(winnerScore = 30, loserScore = 29, selfScore = 0)
                            }
                            addSet {
                                addRows(winnerScore = 30, loserScore = 29, selfScore = 0)
                            }
                        }
                    }
                },
        ).forEach { db.add(it) }

        assertEquals(
                listOf(
                        DatabaseArrowCountCalendarData("07-03", 3),
                        DatabaseArrowCountCalendarData("08-03", 39),
                        DatabaseArrowCountCalendarData("09-03", 33),
                        DatabaseArrowCountCalendarData("10-03", 3),
                        DatabaseArrowCountCalendarData("11-03", 12),
                        DatabaseArrowCountCalendarData("12-03", 12),
                        DatabaseArrowCountCalendarData("13-03", 12),
                ),
                db.shootDao().getCountsForCalendar(
                        fromDate = "7/3/20 02:00".parseDate(),
                        toDate = "13/3/20 13:00".parseDate(),
                ).first()
        )
    }

    @Test
    fun testGetCountsForCalendar_DaoAllTypes() = runTest {
        db.add(TestUtils.ROUNDS[0])

        listOf(
                // Empty shoot
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 1, dateShot = "2/3/20 10:00".parseDate())
                },
                // Scoring
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 2, dateShot = "3/3/20 10:00".parseDate())
                    addIdenticalArrows(24, 1)
                    addRound(TestUtils.ROUNDS[0], 0)
                },
                // Scoring with sighters
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 3, dateShot = "4/3/20 10:00".parseDate())
                    addIdenticalArrows(24, 1)
                    addRound(TestUtils.ROUNDS[0], 6)
                },
                // Counter
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 4, dateShot = "5/3/20 10:00".parseDate())
                    addArrowCounter(24)
                    addRound(TestUtils.ROUNDS[0], 0)
                },
                // Counter with sighters
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 5, dateShot = "6/3/20 10:00".parseDate())
                    addArrowCounter(24)
                    addRound(TestUtils.ROUNDS[0], 6)
                },
                // H2h with empty heat
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 6, dateShot = "7/3/20 10:00".parseDate())
                    addH2h {
                        addHeat {}
                    }
                },
                // Full 6-0 and 6-5 h2h with heat with sighters
                ShootPreviewHelperDsl.create {
                    shoot = shoot.copy(shootId = 7, dateShot = "8/3/20 10:00".parseDate())
                    addH2h {
                        addHeat {
                            heat = heat.copy(heat = 1, sightersCount = 4)
                            addSet {
                                addRows(winnerScore = 30, loserScore = 29, selfScore = 30)
                            }
                            addSet {
                                addRows(winnerScore = 30, loserScore = 29, selfScore = 30)
                            }
                            addSet {
                                addRows(winnerScore = 30, loserScore = 29, selfScore = 30)
                            }
                        }
                        addHeat {
                            heat = heat.copy(heat = 0, sightersCount = 0, isShootOffWin = true)
                            addSet {
                                addRows(
                                        winnerScore = 30,
                                        loserScore = 29,
                                        selfScore = 30,
                                        result = HeadToHeadResult.WIN,
                                )
                            }
                            addSet {
                                addRows(
                                        winnerScore = 30,
                                        loserScore = 29,
                                        selfScore = 29,
                                        result = HeadToHeadResult.LOSS,
                                )
                            }
                            addSet {
                                addRows(
                                        winnerScore = 30,
                                        loserScore = 29,
                                        selfScore = 29,
                                        result = HeadToHeadResult.LOSS,
                                )
                            }
                            addSet {
                                addRows(
                                        winnerScore = 30,
                                        loserScore = 29,
                                        selfScore = 30,
                                        result = HeadToHeadResult.WIN,
                                )
                            }
                            addSet {
                                addRows(
                                        winnerScore = 30,
                                        loserScore = 29,
                                        selfScore = 30,
                                        result = HeadToHeadResult.TIE,
                                )
                            }
                            addSet {
                                addRows(
                                        winnerScore = 10,
                                        loserScore = 9,
                                        selfScore = 10,
                                        result = HeadToHeadResult.WIN,
                                )
                            }
                        }
                    }
                },
        ).forEach { db.add(it) }

        assertEquals(
                listOf(
                        DatabaseArrowCountCalendarData("02-03", 0),
                        DatabaseArrowCountCalendarData("03-03", 24),
                        DatabaseArrowCountCalendarData("04-03", 30),
                        DatabaseArrowCountCalendarData("05-03", 24),
                        DatabaseArrowCountCalendarData("06-03", 30),
                        DatabaseArrowCountCalendarData("07-03", 0),
                        DatabaseArrowCountCalendarData("08-03", 29),
                ),
                db.shootDao().getCountsForCalendar(
                        fromDate = "1/3/20 02:00".parseDate(),
                        toDate = "13/3/20 13:00".parseDate(),
                ).first()
        )
    }

    /**
     * Check that the from/to dates are correctly calculated
     */
    @Test
    fun testGetShootsForCalendar_Repo() = runTest {
        fun Int.pad() = toString().padStart(2, '0')

        List(90) {
            ShootPreviewHelperDsl.create {
                shoot = shoot.copy(
                        shootId = 1 + it,
                        dateShot = "01/02/20 10:00".parseDate().apply { add(Calendar.DATE, it) },
                )
                addArrowCounter(3)
            }
        }.forEach { db.add(it) }

        assertEquals(
                listOf(
                        List(8) { "${(it + 22).pad()}-02" },
                        List(31) { "${(it + 1).pad()}-03" },
                        List(8) { "${(it + 1).pad()}-04" },
                ).flatten(),
                shootsRepo.getCountsForCalendar("05/03/20 10:00".parseDate()).first().map { it.dateString }
        )
    }

    @Test
    fun testGet_HighestAndMostRecent_ShootsForRound() = runTest {
        val rounds = TestUtils.ROUNDS
        val shoots = listOf(
                /*
                 * Ignored - incorrect round
                 */
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(1, TestUtils.generateDate(2010))
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(2, TestUtils.generateDate(2011))
                    round = rounds[1]
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(3, TestUtils.generateDate(2012))
                    round = rounds[0]
                    roundSubTypeId = 2
                },
                /*
                 * Valid
                 */
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(4, TestUtils.generateDate(2013))
                    round = rounds[0]
                    roundSubTypeId = 1
                    completeRound(5)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(5, TestUtils.generateDate(2014))
                    round = rounds[0]
                    completeRound(4)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(6, TestUtils.generateDate(2015))
                    round = rounds[0]
                    completeRound(3)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(7, TestUtils.generateDate(2016))
                    round = rounds[0]
                    completeRound(3)
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(8, TestUtils.generateDate(2017))
                    round = rounds[0]
                    completeRoundWithCounter()
                },
                ShootPreviewHelperDsl.create {
                    shoot = DatabaseShoot(9, TestUtils.generateDate(2018))
                    round = rounds[0]
                    completeRound(10, true)
                    arrows = arrows!!.dropLast(1)
                },
        )
        rounds.forEach { db.add(it) }
        shoots.forEach { db.add(it) }

        assertEquals(
                listOf(4, 5, 6),
                shootsRepo.getHighestScoreShootsForRound(3, rounds[0].round.roundId, 1)
                        .first()
                        .map { it.shootId }
        )
        assertEquals(
                listOf(9, 8, 7),
                shootsRepo.getMostRecentShootsForRound(3, rounds[0].round.roundId, 1)
                        .first()
                        .map { it.shootId }
        )
    }
}
