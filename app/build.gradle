plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'com.google.dagger.hilt.android'
}

/*
 * Versioning
 */
ext.minimumSdkVersion = 21 // 2 digits
ext.versionMajor = 1 // 2 digits
ext.versionMinor = 2 // 2 digits
ext.versionPatch = 4 // 2 digits
ext.extraInfo = 0 // 1 digit (currently unused)
ext.versionClassifier = null // Extra info to be appended to version name e.g. alpha (used for version name)
ext.isSnapshot = false // Will append SNAPSHOT to version name

@SuppressWarnings('GrMethodMayBeStatic')
private Integer generateVersionCode() {
    // There is one digit spare between min sdk and major version
    return ext.minimumSdkVersion * 10000000 + ext.extraInfo * 1000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

@SuppressWarnings('GrMethodMayBeStatic')
private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null && ext.isSnapshot) {
        ext.versionClassifier = "SNAPSHOT"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName
}

android {
    compileSdk 32
    defaultConfig {
        applicationId "eywa.projectcodex"
        minSdk project.ext.minimumSdkVersion
        targetSdk 32
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner = "eywa.projectcodex.instrumentedTests.utils.CustomTestRunner"
        multiDexEnabled true

        // These two sections allow exporting of the database schemas
        // which allows old versions of the database to be created for testing purposes
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        create("uiTests") {
            initWith(getByName("debug"))
            applicationIdSuffix = ".uiTests"
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        flavorDimensions("environment")
        create("local") {
            dimension = "environment"
        }
        create("live") {
            dimension = "environment"
        }
    }
    variantFilter { variant ->
        ignore = true
        if (variant.name in ["localUiTests", "localDebug", "liveDebug", "liveRelease"]) {
            ignore = false
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }
    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    testBuildType 'uiTests'

    sourceSets {
        main {
            res {
                srcDirs 'src/main/res/general',
                        'src/main/res/layouts/inputEnd', 'src/main/res/layouts/general',
                        'src/main/res/layouts/tableView',
                        'src/main/res/launcherAssets', 'src/main/res/iconAssets',
                        'src/main/res/strings',
                        'src/main/res/prototyping'
            }
        }
        androidTest {
            java.srcDir 'src/androidTest/java'
            manifest.srcFile 'src/debug/AndroidManifest.xml'
        }
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.1.1"
    }
}

kapt {
    correctErrorTypes = true // Hilt: allow references to generated code
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    testImplementation "junit:junit:4.13"

    // Testing
    def android_test_version = "1.4.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.test:runner:$android_test_version"
    androidTestImplementation "androidx.test:rules:$android_test_version"
    implementation "com.xfinity:resourceprovider-library:1.2.1"
    kapt "com.xfinity:resourceprovider-compiler:1.2.1"
    testImplementation "com.xfinity:resourceprovider-testutils:1.2.1"
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.4.0')
    def mockito_version = "4.0.0"
    implementation("org.mockito:mockito-core:$mockito_version")
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    implementation "org.mockito.kotlin:mockito-kotlin:$mockito_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_version"

    def archTestingVersion = "2.1.0"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    // Database components
    def androidRoomVersion = "2.4.2"
    implementation "androidx.room:room-runtime:$androidRoomVersion"
    implementation "androidx.room:room-ktx:$androidRoomVersion"
    kapt "androidx.room:room-compiler:$androidRoomVersion"
    androidTestImplementation "androidx.room:room-testing:$androidRoomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.4.0-alpha01"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.2.0")

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1"

    // Nav Graph
    def nav_version = "2.5.3"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    // Testing Fragments
    def fragment_version = "1.3.4"
    androidTestImplementation "androidx.fragment:fragment-testing:$fragment_version"
    implementation "androidx.fragment:fragment-ktx:1.5.4"
    implementation "androidx.test:core:1.5.0"
    implementation "androidx.test:rules:1.5.0"
    implementation "androidx.test:runner:1.5.1"

    // Table view for the score pad
    implementation 'com.evrencoskun.library:tableview:0.8.9'

    // Espresso testing wait conditions
    androidTestImplementation 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'

    // JSON Parsing
    implementation 'com.beust:klaxon:5.0.1'

    // Source: https://stackoverflow.com/a/60311131
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.github.deano2390:MaterialShowcaseView:1.3.4'
    // Highlighting UI elements to the user
    implementation "androidx.core:core-ktx:1.6.0"

    // Dependency Injection
    implementation("com.google.dagger:hilt-android:2.44")
    kapt("com.google.dagger:hilt-android-compiler:2.44")
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.44")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.44")

    // Jetpack compose
    def compose_version = "1.1.1"
    implementation "androidx.compose.ui:ui:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Material Design
    implementation "androidx.compose.material:material:1.2.1"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    // Integration with observables
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.1'
    implementation 'androidx.compose.runtime:runtime-rxjava2:1.1.1'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'
}

allprojects {
    configurations.all {
        resolutionStrategy.force 'org.objenesis:objenesis:2.6' // Source: https://stackoverflow.com/a/64181442
    }
}
